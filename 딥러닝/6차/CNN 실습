```python
# 드라이브 연결
from google.colab import drive
drive.mount('/content/drive') 


# 파이토치
!pip3 install torch
!pip3 install torchvision 


# 데이터 로드하기

import torch
import numpy as np
import matplotlib.pyplot as plt

# 여기서 데이터셋을 가지고 올 거임
from sklearn.datasets import fetch_openml 


#open merchine learning 에서 필기 관련 데이터를 가지고 오겠다. fetch가 가지고 오겠다는 소리
mnist = fetch_openml('mnist_784', version=1, cache=True) 


# nmist에 있는 첫번째 사진
mnist.data.values[0]


# 레이블 값(정답)
mnist.target[0]


mnist.target = mnist.target.astype(np.int8)


X = mnist.data.values / 255  # 0-255값을 [0,1] 구간으로 정규화
y = mnist.target


X[0]
y[0]


plt.imshow(X[0].reshape(28, 28), cmap='gray')
print("이 이미지 데이터의 레이블은 {:.0f}이다".format(y[0]))


# 데이터를 불러오기 위한 라이브러리
from torch.utils.data import TensorDataset, DataLoader
# 데이터 쪼개기
from sklearn.model_selection import train_test_split


# 훈련 데이터와 테스트 데이터의 분리

# X: 이미지, y: 정답
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/7, random_state=0)

# 들어가는 데이터 타입을 위해 바꾸는 과정
y_train = y_train.values
y_test = y_test.values

# 생 데이터를 학습시키기 위해 Tensor 값으로 바꾸는 과정이 필요함
X_train = torch.Tensor(X_train)
X_test = torch.Tensor(X_test)
y_train = torch.LongTensor(y_train)
y_test = torch.LongTensor(y_test)

ds_train = TensorDataset(X_train, y_train)
ds_test = TensorDataset(X_test, y_test)

loader_train = DataLoader(ds_train, batch_size=64, shuffle=True)
loader_test = DataLoader(ds_test, batch_size=64, shuffle=False)


# 신경망 구조(다층 퍼셉트론)
from torch import nn #뉴럴 네트워크 약자

model = nn.Sequential() #망을 만듦
# 필터링 거친 이후 이미지 Linear( 입력, 출력 )
model.add_module('fc1', nn.Linear(28*28*1, 100)) 
# 활성화 함수 ReLU 사용
model.add_module('relu1', nn.ReLU())
# 이전층에 넘겨준 100 받은거임
model.add_module('fc2', nn.Linear(100, 100))
model.add_module('relu2', nn.ReLU())
# 얜 결과층이라 2계층 신경망임
model.add_module('fc3', nn.Linear(100, 10))

print(model)


# 엔트로피: 무질서를 나타내는 수치, 크면 무질서 작으면 결단력 있음
from torch import optim

# 오차함수 선택
loss_fn = nn.CrossEntropyLoss()

# 가중치를 학습하기 위한 최적화 기법 선택
optimizer = optim.Adam(model.parameters(), lr=0.01)


def train(epoch):
    model.train()  # 신경망을 학습 모드로 전환

    # 데이터로더에서 미니배치를 하나씩 꺼내 학습을 수행
    for data, targets in loader_train:

        optimizer.zero_grad()  # 경사를 0으로 초기화
        outputs = model(data)  # 데이터를 입력하고 출력을 계산(예측값?)
        loss = loss_fn(outputs, targets)  # 출력과 훈련 데이터 정답 간의 오차를 계산

        loss.backward()  # 오차를 역전파 계산
        optimizer.step()  # 역전파 계산한 값으로 가중치를 수정

    print("epoch{}：완료\n".format(epoch))


def test():
    model.eval()  # 신경망을 추론 모드로 전환
    correct = 0 # 정확도 계산을 위해 넣어줌

    # 데이터로더에서 미니배치를 하나씩 꺼내 추론을 수행
    with torch.no_grad():  # 추론 과정에는 미분이 필요없음
        for data, targets in loader_test:

            outputs = model(data)  # 데이터를 입력하고 출력을 계산

            # 추론 계산
            _, predicted = torch.max(outputs.data, 1)  # 확률이 가장 높은 레이블이 무엇인지 계산
            correct += predicted.eq(targets.data.view_as(predicted)).sum()  # 정답과 일치한 경우 정답 카운트를 증가

    # 정확도 출력
    data_num = len(loader_test.dataset)  # 데이터 총 건수
    print('\n테스트 데이터에서 예측 정확도: {}/{} ({:.0f}%)\n'.format(correct, data_num, 100. * correct / data_num))


# 학습 전
test()


# 학습 후
for epoch in range(3):
    train(epoch)
test()


index = 2018

model.eval()  # 신경망을 추론 모드로 전환
data = X_test[index]
output = model(data)  # 데이터를 입력하고 출력을 계산
_, predicted = torch.max(output.data, 0)  # 확률이 가장 높은 레이블이 무엇인지 계산

print("예측 결과 : {}".format(predicted))

X_test_show = (X_test[index]).numpy()
plt.imshow(X_test_show.reshape(28, 28), cmap='gray')
print("이 이미지 데이터의 정답 레이블은 {:.0f}입니다".format(y_test[index]))
```